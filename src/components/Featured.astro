---
import Heading from "@/components/Heading.astro";
import IconGithub from "@/components/icons/IconGithub.astro";
import IconExternal from "@/components/icons/IconExternal.astro";
import { getCollection } from "astro:content";
import { Picture } from "astro:assets";

const featured = await getCollection("featured");

const featuredImages: any = import.meta.glob(
  "/src/content/featured/**/**/*.{jpg,png,webp}",
  {
    eager: true,
  }
);
---

<section class="featured_container section flex-center" id="projects">
  <Heading>Some Things I've Built</Heading>
  <div class="featured_grid">
    {
      featured.map(async (feature) => {
        const {
          data: { title, external, tech, github, cover },
          render,
          slug,
          collection,
        } = feature;
        const { Content: ContentProjectDescription } = await render();
        const imgPath = `/src/content/${collection}/${slug}/${cover.replace("./", "")}`;

        if (!featuredImages[imgPath]) {
          throw new Error(`No image found for ${imgPath}`);
        }

        const currentImage = featuredImages[imgPath].default;

        return (
          <div class="project">
            <div class="content_container">
              <h4 class="featured_label">Featured Project</h4>
              <h5 class="project_name">
                {external ? (
                  <a
                    href={external}
                    target="_blank"
                    rel="nofollow noopener noreferrer"
                    aria-label="External Link"
                  >
                    {title}
                  </a>
                ) : (
                  title
                )}
              </h5>
              <div class="project_description inline-link">
                <ContentProjectDescription />
              </div>
              {tech && (
                <ul class="tech_list">
                  {tech.map((tech: string) => (
                    <li>{tech}</li>
                  ))}
                </ul>
              )}
              <div class="project_links">
                {github && (
                  <a
                    href={github}
                    target="_blank"
                    rel="nofollow noopener noreferrer"
                    aria-label="Github Link"
                  >
                    <IconGithub />
                  </a>
                )}
                {external && (
                  <a
                    href={external}
                    target="_blank"
                    rel="nofollow noopener noreferrer"
                    aria-label="External Link"
                  >
                    <IconExternal />
                  </a>
                )}
              </div>
            </div>
            <div class="img_container">
              <Picture
                src={currentImage}
                alt={title}
                width={currentImage.width}
                height={currentImage.height}
                formats={["webp", "png"]}
                class="featured_img"
              />
            </div>
          </div>
        );
      })
    }
  </div>
</section>

<script>
  import ScrollReveal from "scrollreveal";
  import { config } from "@/constants/config.ts";

  ScrollReveal().reveal(".featured_container", config.srConfig());
</script>

<style>
  .featured_container {
    flex-direction: column;
    align-items: flex-start;
  }
  .featured_grid {
    position: relative;
  }
  .project {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(12, 1fr);
    align-items: center;
    margin-bottom: 100px;
    &:last-of-type {
      margin-bottom: 0;
    }
    &:nth-of-type(odd) {
      .content_container {
        grid-column: 7 / -1;
        text-align: right;
      }
      .tech_list {
        justify-content: flex-end;
        li {
          margin-left: var(--margin);
          margin-right: 0;
        }
      }
      .project_links {
        justify-content: flex-end;
        margin-left: 0;
        margin-right: -10px;
      }
      .img_container {
        grid-column: 1 / 8;
      }
    }
  }
  .content_container {
    position: relative;
    z-index: 2;
    grid-column: 1 / 7;
    grid-row: 1 / -1;
  }
  .featured_label {
    font-size: var(--text-smallish);
    font-weight: normal;
    color: var(--color-green);
    font-family: var(--font-sf-mono);
    margin-top: 10px;
    padding-top: 0;
  }
  .project_name {
    font-size: 28px;
    font-weight: 600;
    margin: 0 0 20px;
    color: var(--color-lightest-slate);
  }
  .project_description {
    background-color: var(--color-light-navy);
    color: var(--color-light-slate);
    padding: 20px;
    border-radius: var(--border-radius);
    font-size: 17px;
    line-height: 1.3;
    p {
      margin: 0;
    }
    a {
      color: var(--color-white);
    }
  }
  .tech_list {
    display: flex;
    flex-wrap: wrap;
    margin: 25px 0 10px;
    li {
      font-family: var(--font-sf-mono);
      font-size: var(--text-smallish);
      color: var(--color-light-slate);
      margin-right: var(--margin);
      margin-bottom: 7px;
      white-space: nowrap;
      &:last-of-type {
        margin-right: 0;
      }
    }
  }
  .project_links {
    display: flex;
    align-items: center;
    position: relative;
    margin-top: 10px;
    margin-left: -10px;
    a {
      padding: 10px;
      svg {
        width: 22px;
        height: 22px;
      }
    }
  }
  .img_container {
    position: relative;
    z-index: 1;
    border-radius: var(--border-radius);
    background-color: var(--color-green);
    grid-column: 6 / -1;
    grid-row: 1 / -1;
    transition: var(--theme-transition);
    &:hover,
    &:focus {
      background: transparent;
      &:before,
      .featured_img {
        background: transparent;
        filter: none;
      }
    }
    &:before {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 3;
      transition: var(--theme-transition);
      background-color: var(--color-navy);
      mix-blend-mode: screen;
    }
  }
  .featured_img {
    width: 100%;
    height: 100%;
    max-width: 100%;
    vertical-align: middle;
    border-radius: var(--border-radius);
    position: relative;
    mix-blend-mode: multiply;
    filter: grayscale(100%) contrast(1) brightness(90%);
  }
  @media screen and (max-width: 48em) {
    .project {
      &:nth-of-type(odd) {
        .img_container {
          height: 100%;
        }
      }
    }
    .project_name {
      font-size: 24px;
      a {
        display: block;
      }
    }
    .img_container {
      height: 100%;
    }
    .featured_img {
      object-fit: cover;
      width: auto;
      height: 100%;
      filter: grayscale(100%) contrast(1) brightness(80%);
    }
  }
  @media screen and (max-width: 37.5em) {
    .project {
      margin-bottom: 70px;
      &:nth-of-type(odd) {
        .content_container {
          grid-column: 1 / -1;
          padding: 40px 40px 30px;
        }
        .img_container {
          grid-column: 1 / -1;
          opacity: 0.25;
        }
      }
    }
    .content_container {
      grid-column: 1 / -1;
      padding: 40px 40px 30px;
    }
    .project_description {
      background-color: transparent;
      padding: 20px 0;
    }
    .tech_list {
      color: var(--color-lightest-slate);
      margin-right: 10px;
    }
    .img_container {
      grid-column: 1 / -1;
      opacity: 0.25;
    }
  }
  @media screen and (max-width: 30em) {
    .project {
      &:nth-of-type(odd) {
        .content_container {
          padding: 30px 25px 20px;
        }
      }
    }
    .content_container {
      padding: 30px 25px 20px;
    }
  }
</style>
